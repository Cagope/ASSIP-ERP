import { Component, OnInit, inject, signal } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ActivatedRoute, Router, RouterLink } from '@angular/router';
import { PermisosEspecialesApi, PermisoEspecialRequest, PermisoEspecialResponse } from './permisos-especiales.api';
import { DatosPersonalesApi } from '../datos-personales/datos-personales.api';

type ToggleKey = 'recibeLlamadas'|'recibeMsm'|'recibeEmails'|'recibeCartas'|'recibeRedesSociales';

@Component({
  standalone: true,
  selector: 'app-permisos-especiales-upsert',
  imports: [CommonModule, RouterLink],
  templateUrl: './permisos-especiales-upsert.component.html',
  styleUrls: ['./permisos-especiales-upsert.component.scss'],
})
export class PermisosEspecialesUpsertComponent implements OnInit {
  private api = inject(PermisosEspecialesApi);
  private personasApi = inject(DatosPersonalesApi);
  private route = inject(ActivatedRoute);
  private router = inject(Router);

  idDatosPersonales = signal<number>(0);
  idPermiso = signal<number | null>(null);
  afiliadoNombre = signal<string>('');

  loading = signal<boolean>(true);
  error = signal<string | null>(null);
  mode = signal<'new'|'edit'>('new');

  // Reglas: el front "se ve" en TRUE por defecto (para visibilidad),
  // pero al guardar, cualquier flag NO tocado => se envía FALSE.
  view: Record<ToggleKey, boolean> = {
    recibeLlamadas: true,
    recibeMsm: true,
    recibeEmails: true,
    recibeCartas: true,
    recibeRedesSociales: true,
  };
  touched: Record<ToggleKey, boolean> = {
    recibeLlamadas: false,
    recibeMsm: false,
    recibeEmails: false,
    recibeCartas: false,
    recibeRedesSociales: false,
  };

  ngOnInit(): void {
    const pm = this.route.snapshot.paramMap;
    const idPer = Number(pm.get('idDatosPersonales') ?? 0);
    const idP = pm.get('idPermiso') ? Number(pm.get('idPermiso')) : null;
    this.idDatosPersonales.set(idPer);
    this.idPermiso.set(idP);
    this.mode.set(idP ? 'edit' : 'new');

    this.loadAfiliadoNombre(idPer);

    if (idP) {
      // Editar: reflejar valores reales desde backend
      this.api.getByPersona(idPer).subscribe({
        next: (resp) => {
          const row: PermisoEspecialResponse | null = resp.status === 204 ? null : (resp.body ?? null);
          if (row) {
            this.view.recibeLlamadas = !!row.recibe_llamadas;
            this.view.recibeMsm = !!row.recibe_msm;
            this.view.recibeEmails = !!row.recibe_emails;
            this.view.recibeCartas = !!row.recibe_cartas;
            this.view.recibeRedesSociales = !!row.recibe_redes_sociales;
          }
          this.loading.set(false);
        },
        error: () => { this.error.set('No fue posible cargar.'); this.loading.set(false); }
      });
    } else {
      // Nuevo: se ve todo en true, pero touched=false (se guarda false si no tocan)
      this.loading.set(false);
    }
  }

  onToggle(key: ToggleKey, ev: Event) {
    const checked = (ev.target as HTMLInputElement).checked;
    this.view[key] = checked;
    this.touched[key] = true;
  }

  private loadAfiliadoNombre(idDatos: number) {
    const maybeGet = (this.personasApi as any)?.get;
    if (typeof maybeGet === 'function') {
      (maybeGet as Function).call(this.personasApi, idDatos).subscribe({
        next: (p: any) => this.afiliadoNombre.set(this.buildNombre(p)),
        error: () => this.fetchNombreFromList(idDatos),
      });
    } else { this.fetchNombreFromList(idDatos); }
  }
  private fetchNombreFromList(idDatos: number) {
    this.personasApi.list({ size: 1000 }).subscribe({
      next: (data: any) => {
        const arr: any[] = Array.isArray(data) ? data : (data?.items ?? data?.content ?? []);
        const p = (arr ?? []).find((it: any) => [it?.id, it?.idDatosPersonal, it?.id_datos_personales, it?.idDatosPersonales].some((v: any) => Number(v) === idDatos));
        this.afiliadoNombre.set(this.buildNombre(p));
      },
      error: () => this.afiliadoNombre.set(''),
    });
  }
  private buildNombre(p: any): string {
    if (!p) return '';
    const nombres = p.nombres ?? [p.primerNombre, p.segundoNombre].filter(Boolean).join(' ').trim();
    const apellidos = p.apellidos ?? [p.primerApellido, p.segundoApellido].filter(Boolean).join(' ').trim();
    return [nombres, apellidos].filter(Boolean).join(' ').trim();
  }

  onSubmit() {
    this.loading.set(true);
    const idPer = this.idDatosPersonales(); if (!idPer) return;

    // Construir payload: campos NO tocados => FALSE (regla del negocio)
    const body: PermisoEspecialRequest = {
      recibeLlamadas: this.touched.recibeLlamadas ? this.view.recibeLlamadas : false,
      recibeMsm: this.touched.recibeMsm ? this.view.recibeMsm : false,
      recibeEmails: this.touched.recibeEmails ? this.view.recibeEmails : false,
      recibeCartas: this.touched.recibeCartas ? this.view.recibeCartas : false,
      recibeRedesSociales: this.touched.recibeRedesSociales ? this.view.recibeRedesSociales : false,
    };

    if (this.mode() === 'new') {
      this.api.create(idPer, body).subscribe({
        next: () => this.router.navigate(['/hoja-vida/permisos-especiales', idPer]),
        error: (e) => { this.error.set(String(e?.error || 'No fue posible crear.')); this.loading.set(false); }
      });
    } else {
      const idP = this.idPermiso();
      if (!idP) { this.error.set('No se encontró ID de permiso.'); this.loading.set(false); return; }
      this.api.update(idPer, idP, body).subscribe({
        next: () => this.router.navigate(['/hoja-vida/permisos-especiales', idPer]),
        error: (e) => { this.error.set(String(e?.error || 'No fue posible guardar.')); this.loading.set(false); }
      });
    }
  }
}
